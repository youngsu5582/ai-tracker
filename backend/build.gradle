plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'youngsu5582.tool'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok' // For tests
    testAnnotationProcessor 'org.projectlombok:lombok' // For tests

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers' // For @ServiceConnection
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testImplementation 'org.wiremock.integrations:wiremock-spring-boot:3.10.0'

    testImplementation("com.navercorp.fixturemonkey:fixture-monkey-starter:1.1.15")

}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
    // 커버리지 측정에서 AiTrackerApplication 클래스를 제외합니다.
    classDirectories.setFrom(files(classDirectories.files.collect { fileTree(dir: it, exclude: "**/AiTrackerApplication.class") }))
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 규칙을 비활성화하여 빌드가 실패하지 않도록 합니다.
            enabled = false
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

task testCoverage {
    group 'verification'
    description 'Runs the unit tests with coverage'
    dependsOn(test, jacocoTestReport, jacocoTestCoverageVerification)

    tasks.jacocoTestReport.mustRunAfter(tasks.test)
    tasks.jacocoTestCoverageVerification.mustRunAfter(tasks.jacocoTestReport)
}
